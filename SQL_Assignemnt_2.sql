-- Question 1: 
-- Retrieve the total number of rentals made in the Sakila database. 
-- Hint: Use the COUNT() function.

use mavenmovies;
SELECT 
    COUNT(rental_rate)
FROM
    film;
    
-- Question 2: 
-- Find the average rental duration (in days) of movies rented from the Sakila database.
-- Hint: Utilize the AVG() function. 
SELECT 
    AVG(rental_duration)
FROM
    film;

-- String Functions: 
-- Question 3: 
-- Display the first name and last name of customers in uppercase. 
-- Hint: Use the UPPER () function. 
SELECT 
    UPPER(first_name) AS FirstName, UPPER(last_name) AS LastName
FROM
    customer;
    

-- Question 4: 
-- Extract the month from the rental date and display it alongside the rental ID. 
-- Hint: Employ the MONTH() function.
SELECT 
    rental_id, MONTH(rental_date) AS rental_month
FROM
    rental;

-- GROUP BY:
-- Question 5: 
-- Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
-- Hint: Use COUNT () in conjunction with GROUP BY

SELECT 
    Customer_id, COUNT(rental_id) AS Count_of_Rentals
FROM
    rental
GROUP BY customer_id;

-- Question 6: 
-- Find the total revenue generated by each store. 
-- Hint: Combine SUM() and GROUP BY.
select * from store;
select * from payment; 
select sum(amount) from payment;

SELECT 
    s.store_id, SUM(amount) AS total_revenue
FROM
    store s
        INNER JOIN
    payment p ON s.store_id = p.staff_id
GROUP BY s.store_id;

-- Question 7: 
-- Display the title of the movie, customer s first name, and last name who rented it. 
-- Hint: Use JOIN between the film, inventory, rental, and customer tables
select * from film; -- title, 
select * from customer; -- first_name, last_name, customer_id
select * from rental; -- rental_id, customer_id
select * from inventory; -- film_id

SELECT 
    f.title, c.first_name, c.last_name, r.rental_id
FROM
    customer c
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id;
    
    
-- Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
-- Hint: Use JOIN between the film actor, film, and actor tables.

select * from film_actor; -- actor_id, film_id
select * from film; -- film_id
select * from actor; -- actor_id
 
 SELECT 
    a.first_name, a.last_name
FROM
    actor a
        LEFT JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        LEFT JOIN
    film f ON fa.film_id = f.film_id where f.title = "GONE WITH THE WIND";
    
    
-- Question 9: 
-- Determine the total number of rentals for each category of movies. 
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

select distinct category_id from film_category; -- film_id, category_id
select * from film; -- title, film_id
select * from rental; -- rental_id, inventory_id
select * from inventory; -- film_id, inventory_id

SELECT 
    fc.category_id, count(r.rental_id) as Total_rentals
FROM
    film_category fc
        INNER JOIN
    inventory i ON fc.film_id = i.film_id
        INNER JOIN
    rental r ON i.inventory_id = r.inventory_id group by fc.category_id;
    

-- Question 10:    
-- Find the average rental rate of movies in each language. 
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY. 

select * from language; -- language_id, name
select * from film; -- rantal_rate, 

SELECT 
    f.language_id, l.name, f.title, AVG(rental_rate) AS avg_rate
FROM
    film f
        inner	 JOIN
    language l ON f.language_id = l.language_id
GROUP BY f.language_id, l.name, f.title;

-- Question 11:
-- Retrieve the customer names along with the total amount they've spent on rentals. 
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY. 

select * from customer; -- first_name, last_name, Customer_id
select * from payment; -- customer_id, rental_id, amount
Select * from rental; -- rental_id, customer_id

SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(amount) AS total_amount
FROM
    customer c
        INNER JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

-- Question 12:
-- List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY. 

select * from film; -- title, film_id
select * from customer; -- customer_id, address_id
select * from address; -- address_id, city_id
select * from city; -- city_id, country_id
select * from rental; -- rental_id, inventory_id, customer_id
select * from inventory; -- inventory_id, film_id

SELECT 
    c.customer_id, ci.city, any_value(f.title) as film_title
FROM
    customer c
        INNER JOIN
    address a ON c.address_id = a.address_id
        INNER JOIN
    city ci ON a.city_id = ci.city_id
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id
    where city = 'London'
GROUP BY c.customer_id;


-- Question 13:
-- Display the top 5 rented movies along with the number of times they've been rented. 
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results. 

select * from rental; -- inventory_id, rental_id
select * from inventory; -- inventory_id, film_id
select * from film; -- title, 

SELECT 
    f.title, COUNT(rental_id) as number_of_time_rented
FROM
    rental r
        LEFT JOIN
    inventory i ON r.inventory_id = i.inventory_id
        LEFT JOIN
    film f ON i.film_id = f.film_id
GROUP BY f.title
LIMIT 5;


-- Question 14: 
-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY. 

select * from rental; -- rental_id, customer_id, inventory_id
select * from inventory; -- inventory_id, store_id
select * from customer; -- customer_id, store_id

SELECT 
    r.rental_id, r.customer_id, c.store_id
FROM
    rental r
        left JOIN
    inventory i ON r.inventory_id = i.inventory_id
        left JOIN
    customer c ON i.store_id = c.store_id group by r.rental_id;
    
    